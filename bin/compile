#!/usr/bin/env bash

echo BUILD_PATH:$1
echo CACHE_DIR:$2
echo ENV_DIR:$3

set -e

function indent() {
  c='s/^/       /'
  case $(uname) in
    Darwin) sed -l "$c";;
    *)      sed -u "$c";;
  esac
}

unset GIT_DIR

for BUILDPACK in $(cat $1/.buildpacks); do
  dir=$(mktemp -t buildpackXXXXX)
  rm -rf $dir

  OIFS=IFS
  IFS=#
  ARR=($BUILDPACK)
  IFS=OIFS

  url=${ARR[0]}
  branch=${ARR[1]}
  root=${ARR[2]}
  #url=${BUILDPACK%#*}
  #branch=${BUILDPACK#*#}

  if [ "$branch" == "$url" ]; then
    branch=""
  fi

  if [ "$url" != "" ]; then
    echo "=====> Downloading Buildpack: $url"

    if [[ "$url" =~ \.tgz$ ]]; then
      mkdir -p "$dir"
      curl -s "$url" | tar xvz -C "$dir" >/dev/null 2>&1
    else
      git clone $url $dir >/dev/null 2>&1
    fi
    cd $dir

    if [ "$branch" != "" ]; then
      git checkout $branch >/dev/null 2>&1
    fi

    # we'll get errors later if these are needed and don't exist
    chmod -f +x $dir/bin/{detect,compile,release} || true

    framework=$($dir/bin/detect $1/$root)

    if [ $? == 0 ]; then
      echo "=====> Detected Framework: $framework"
      $dir/bin/compile $1/$root $2 $3

      if [ $? != 0 ]; then
        exit 1
      fi

      if [ -x $dir/bin/release ]; then
        $dir/bin/release $1/$root > $1/$root/last_pack_release.out
      fi
    fi
  fi
done

if [ -e $1/$root/last_pack_release.out ]; then
  echo "Using release configuration from last framework ($framework)."
fi

# Update the PATH
# Node hack
status "Building runtime environment (Node hack)"
cur_dir=`pwd`
cd $build_dir; cd ..
root_dir=`pwd`
mkdir -p $root_dir/.profile.d
echo "export PATH=\"\$HOME/Application/vendor/node/bin:\$HOME/Application/bin:\$HOME/Application/node_modules/.bin:\$PATH\";" > $root_dir/.profile.d/nodejs.sh
cd $cur_dir